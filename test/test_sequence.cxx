#if defined(BOOST_VMD_TEST_GENERAL_HEADER)
#include <boost/vmd/vmd.hpp>
#else
#include <boost/vmd/identifier.hpp>
#include <boost/vmd/is_empty.hpp>
#include <boost/vmd/list.hpp>
#include <boost/vmd/number.hpp>
#include <boost/vmd/seq.hpp>
#include <boost/vmd/sequence.hpp>
#include <boost/vmd/tuple.hpp>
#endif
#include <boost/detail/lightweight_test.hpp>
#include <boost/preprocessor/array/elem.hpp>
#include <boost/preprocessor/array/size.hpp>
#include <boost/preprocessor/list/at.hpp>
#include <boost/preprocessor/list/size.hpp>
#include <boost/preprocessor/seq/elem.hpp>
#include <boost/preprocessor/tuple/elem.hpp>
#include <boost/preprocessor/variadic/elem.hpp>
#include <boost/preprocessor/variadic/size.hpp>

int main()
  {
  
#if BOOST_PP_VARIADICS

  #define BOOST_VMD_REGISTER_ggh (ggh)
  #define BOOST_VMD_DETECT_ggh_ggh
  #define BOOST_VMD_REGISTER_dvd (dvd)
  #define BOOST_VMD_DETECT_dvd_dvd
  
  #define ANIDENTIFIER ggh
  #define ANIDENTIFIER2 dvd
  #define ANUMBER 249
  #define ANUMBER2 17
  #define ASEQ (25)(26)(27)
  #define ATUPLE (0,1,2,3,((a,b))((c,d))((e))((f,g,h)))
  #define ALIST (0,(1,(2,(3,BOOST_PP_NIL))))
  #define ANARRAY (3,(a,b,38))
  #define ASEQUENCE ANUMBER ALIST ATUPLE ANIDENTIFIER ANARRAY ASEQ
  #define ASEQUENCE2 ANIDENTIFIER2 ASEQ ALIST ANUMBER ATUPLE
  #define ASEQUENCE3 ASEQ ANUMBER2 ATUPLE
  #define ASEQUENCE4
  
  /* ELEM */
  
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(0,BOOST_VMD_SEQUENCE_ELEM(4,ASEQUENCE)),BOOST_VMD_TYPE_ARRAY);
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(1,BOOST_VMD_SEQUENCE_ELEM(3,ASEQUENCE2)),249);
  BOOST_TEST_EQ(BOOST_PP_SEQ_ELEM(2,BOOST_PP_TUPLE_ELEM(1,BOOST_VMD_SEQUENCE_ELEM(0,ASEQUENCE3))),27);
  BOOST_TEST(BOOST_VMD_IS_EMPTY(BOOST_VMD_SEQUENCE_ELEM(3,ASEQUENCE3)));
  
  /* ELEM_DATA */
  
  BOOST_TEST(BOOST_VMD_IS_IDENTIFIER(BOOST_VMD_SEQUENCE_DATA_ELEM(3,ASEQUENCE),(tvt,aaa,ggh)));
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(3,BOOST_VMD_SEQUENCE_DATA_ELEM(4,ASEQUENCE2)),3);
  BOOST_TEST_EQ(BOOST_PP_SEQ_ELEM(0,BOOST_VMD_SEQUENCE_DATA_ELEM(0,ASEQUENCE3)),25);
  BOOST_TEST(BOOST_VMD_IS_EMPTY(BOOST_VMD_SEQUENCE_DATA_ELEM(0,ASEQUENCE4)));
  
  /* ELEM_SPLIT */
  
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(2,BOOST_PP_TUPLE_ELEM(1,BOOST_VMD_SEQUENCE_ELEM_SPLIT(1,ASEQUENCE3))),2);
  BOOST_TEST_EQ(BOOST_PP_SEQ_ELEM(0,BOOST_PP_TUPLE_ELEM(1,BOOST_PP_TUPLE_ELEM(0,BOOST_VMD_SEQUENCE_ELEM_SPLIT(1,ASEQUENCE2)))),25);
  BOOST_TEST(BOOST_VMD_IS_BEGIN_IDENTIFIER(BOOST_PP_TUPLE_ELEM(1,BOOST_VMD_SEQUENCE_ELEM_SPLIT(2,ASEQUENCE))));
  BOOST_TEST(BOOST_VMD_IS_EMPTY(BOOST_PP_TUPLE_ELEM(0,BOOST_VMD_SEQUENCE_ELEM_SPLIT(2,ASEQUENCE4))));
  
  /* ELEM_SPLIT_DATA */
  
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(2,BOOST_PP_TUPLE_ELEM(0,BOOST_VMD_SEQUENCE_DATA_ELEM_SPLIT(2,ASEQUENCE))),2);
  BOOST_TEST_EQ(BOOST_PP_SEQ_ELEM(0,BOOST_PP_TUPLE_ELEM(0,BOOST_VMD_SEQUENCE_DATA_ELEM_SPLIT(1,ASEQUENCE2))),25);
  BOOST_TEST(BOOST_VMD_IS_BEGIN_NUMBER(BOOST_PP_TUPLE_ELEM(1,BOOST_VMD_SEQUENCE_DATA_ELEM_SPLIT(0,ASEQUENCE3))));
  BOOST_TEST(BOOST_VMD_IS_EMPTY(BOOST_PP_TUPLE_ELEM(0,BOOST_VMD_SEQUENCE_DATA_ELEM_SPLIT(0,ASEQUENCE4))));
  
  /* SIZE */
  
  BOOST_TEST_EQ(BOOST_VMD_SEQUENCE_SIZE(ASEQUENCE),6);
  BOOST_TEST_EQ(BOOST_VMD_SEQUENCE_SIZE(ASEQUENCE2),5);
  BOOST_TEST_EQ(BOOST_VMD_SEQUENCE_SIZE(ASEQUENCE3),3);
  BOOST_TEST_EQ(BOOST_VMD_SEQUENCE_SIZE(ASEQUENCE4),0);
  
  /* TO_ARRAY */
  
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(0,BOOST_PP_ARRAY_ELEM(3,BOOST_VMD_SEQUENCE_TO_ARRAY(ASEQUENCE))),BOOST_VMD_TYPE_IDENTIFIER);
  BOOST_TEST(BOOST_VMD_IS_IDENTIFIER(BOOST_PP_TUPLE_ELEM(1,BOOST_PP_ARRAY_ELEM(0,BOOST_VMD_SEQUENCE_TO_ARRAY(ASEQUENCE2))),dvd));
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(1,BOOST_PP_ARRAY_ELEM(1,BOOST_VMD_SEQUENCE_TO_ARRAY(ASEQUENCE3))),17);
  BOOST_TEST_EQ(BOOST_PP_ARRAY_SIZE(BOOST_VMD_SEQUENCE_TO_ARRAY(ASEQUENCE4)),0);
  
  /* TO_ARRAY_DATA */
  
  BOOST_TEST_EQ(BOOST_PP_LIST_AT(BOOST_PP_ARRAY_ELEM(2,BOOST_VMD_SEQUENCE_DATA_TO_ARRAY(ASEQUENCE2)),1),1);
  BOOST_TEST_EQ(BOOST_PP_ARRAY_SIZE(BOOST_VMD_SEQUENCE_DATA_TO_ARRAY(ASEQUENCE4)),0);
  BOOST_TEST(BOOST_VMD_IS_SEQ(BOOST_PP_ARRAY_ELEM(0,BOOST_VMD_SEQUENCE_DATA_TO_ARRAY(ASEQUENCE3))));
  BOOST_TEST_EQ(BOOST_PP_ARRAY_ELEM(2,BOOST_PP_ARRAY_ELEM(4,BOOST_VMD_SEQUENCE_DATA_TO_ARRAY(ASEQUENCE))),38);
  
  /* TO_LIST */
  
  BOOST_TEST_EQ(BOOST_PP_SEQ_ELEM(0,BOOST_PP_TUPLE_ELEM(1,BOOST_PP_LIST_AT(BOOST_VMD_SEQUENCE_TO_LIST(ASEQUENCE),5))),25);
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(1,BOOST_PP_LIST_AT(BOOST_VMD_SEQUENCE_TO_LIST(ASEQUENCE2),3)),249);
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(0,BOOST_PP_LIST_AT(BOOST_VMD_SEQUENCE_TO_LIST(ASEQUENCE3),2)),BOOST_VMD_TYPE_TUPLE);
  BOOST_TEST_EQ(BOOST_PP_LIST_SIZE(BOOST_VMD_SEQUENCE_TO_LIST(ASEQUENCE4)),0);
  
  /* TO_LIST_DATA */
  
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(3,BOOST_PP_LIST_AT(BOOST_VMD_SEQUENCE_DATA_TO_LIST(ASEQUENCE),2)),3);
  BOOST_TEST(BOOST_VMD_IS_IDENTIFIER(BOOST_PP_LIST_AT(BOOST_VMD_SEQUENCE_DATA_TO_LIST(ASEQUENCE2),0),(aaa,bbb,dvd)));
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(0,BOOST_PP_LIST_AT(BOOST_VMD_SEQUENCE_DATA_TO_LIST(ASEQUENCE3),2)),0);
  BOOST_TEST_EQ(BOOST_PP_LIST_SIZE(BOOST_VMD_SEQUENCE_DATA_TO_LIST(ASEQUENCE4)),0);
  
  /* TO_SEQ */
  
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(0,BOOST_PP_SEQ_ELEM(1,BOOST_VMD_SEQUENCE_TO_SEQ(ASEQUENCE3))),BOOST_VMD_TYPE_NUMBER);
  BOOST_TEST(BOOST_VMD_IS_TUPLE(BOOST_PP_TUPLE_ELEM(1,BOOST_PP_SEQ_ELEM(4,BOOST_VMD_SEQUENCE_TO_SEQ(ASEQUENCE2)))));
  BOOST_TEST_EQ(BOOST_PP_LIST_AT(BOOST_PP_TUPLE_ELEM(1,BOOST_PP_SEQ_ELEM(1,BOOST_VMD_SEQUENCE_TO_SEQ(ASEQUENCE))),3),3);
  BOOST_TEST(BOOST_VMD_IS_EMPTY(BOOST_VMD_SEQUENCE_TO_SEQ(ASEQUENCE4)));
  
  /* TO_SEQ_DATA */
  
  BOOST_TEST_EQ(BOOST_PP_SEQ_ELEM(1,BOOST_PP_SEQ_ELEM(1,BOOST_VMD_SEQUENCE_DATA_TO_SEQ(ASEQUENCE2))),26);
  BOOST_TEST(BOOST_VMD_IS_EMPTY(BOOST_VMD_SEQUENCE_DATA_TO_SEQ(ASEQUENCE4)));
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(1,BOOST_PP_SEQ_ELEM(2,BOOST_VMD_SEQUENCE_DATA_TO_SEQ(ASEQUENCE))),1);
  BOOST_TEST_EQ(BOOST_PP_SEQ_ELEM(1,BOOST_VMD_SEQUENCE_DATA_TO_SEQ(ASEQUENCE3)),17);
  
  /* TO_TUPLE */
  
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(0,BOOST_PP_TUPLE_ELEM(2,BOOST_VMD_SEQUENCE_TO_TUPLE(ASEQUENCE3))),BOOST_VMD_TYPE_TUPLE);
  BOOST_TEST(BOOST_VMD_IS_EMPTY(BOOST_VMD_SEQUENCE_TO_TUPLE(ASEQUENCE4)));
  BOOST_TEST_EQ(BOOST_PP_SEQ_ELEM(2,BOOST_PP_TUPLE_ELEM(1,BOOST_PP_TUPLE_ELEM(1,BOOST_VMD_SEQUENCE_TO_TUPLE(ASEQUENCE2)))),27);
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(1,BOOST_PP_TUPLE_ELEM(0,BOOST_VMD_SEQUENCE_TO_TUPLE(ASEQUENCE))),249);
  
  /* TO_TUPLE_DATA */
  
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(1,BOOST_VMD_SEQUENCE_DATA_TO_TUPLE(ASEQUENCE3)),17);
  BOOST_TEST(BOOST_VMD_IS_EMPTY(BOOST_VMD_SEQUENCE_DATA_TO_TUPLE(ASEQUENCE4)));
  BOOST_TEST(BOOST_VMD_IS_LIST(BOOST_PP_TUPLE_ELEM(1,BOOST_VMD_SEQUENCE_DATA_TO_TUPLE(ASEQUENCE))));
  BOOST_TEST_EQ(BOOST_PP_SEQ_ELEM(2,BOOST_PP_TUPLE_ELEM(1,BOOST_VMD_SEQUENCE_DATA_TO_TUPLE(ASEQUENCE2))),27);
  
  /* ENUM */
  
  BOOST_TEST(BOOST_VMD_IS_EMPTY(BOOST_VMD_SEQUENCE_ENUM(ASEQUENCE4)));
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(1,BOOST_PP_VARIADIC_ELEM(3,BOOST_VMD_SEQUENCE_ENUM(ASEQUENCE2))),249);
  BOOST_TEST_EQ(BOOST_PP_VARIADIC_SIZE(BOOST_VMD_SEQUENCE_ENUM(ASEQUENCE)),6);
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(0,BOOST_PP_VARIADIC_ELEM(0,BOOST_VMD_SEQUENCE_ENUM(ASEQUENCE3))),BOOST_VMD_TYPE_SEQ);
  
  /* ENUM DATA */
  
  BOOST_TEST(BOOST_VMD_IS_EMPTY(BOOST_VMD_SEQUENCE_DATA_ENUM(ASEQUENCE4)));
  BOOST_TEST(BOOST_VMD_IS_IDENTIFIER(BOOST_PP_VARIADIC_ELEM(0,BOOST_VMD_SEQUENCE_DATA_ENUM(ASEQUENCE2)),(aaa,bbb,dvd)));
  BOOST_TEST_EQ(BOOST_PP_TUPLE_ELEM(2,BOOST_PP_VARIADIC_ELEM(2,BOOST_VMD_SEQUENCE_DATA_ENUM(ASEQUENCE3))),2);
  BOOST_TEST_EQ(BOOST_PP_ARRAY_ELEM(2,BOOST_PP_VARIADIC_ELEM(4,BOOST_VMD_SEQUENCE_DATA_ENUM(ASEQUENCE))),38);
  
#endif

  return boost::report_errors();
  
  }
