# VariadicMacroData testing Jamfile
#
# Copyright (c) 2010-2014
# Edward Diener
#

import testing ;

project variadic_macro_data_tests : requirements <warnings>on
                                                 <toolset>msvc:<warnings>all
                                                 <toolset>msvc:<cxxflags>-wd4003
                                                 <toolset>gcc:<warnings>all
                                                 <toolset>gcc-4.3.0:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.3.0:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.3.0:<cxxflags>-U__STRICT_ANSI__
                                                 <toolset>gcc-4.4.0:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.4.0:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.4.0:<cxxflags>-U__STRICT_ANSI__
                                                 <toolset>gcc-4.4.7:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.5.0:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.5.0:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.5.0:<linkflags>"-Wl,--enable-auto-import"
                                                 <toolset>gcc-4.5.2:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.5.2:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.6.0:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.6.0:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.6.1:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.6.1:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.6.2:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.6.2:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.6.3:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.6.3:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.7.0:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.7.0:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.7.2:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.7.2:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.8.1:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.8.1:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.8.1:<cxxflags>-ftrack-macro-expansion=0
                                                 <toolset>gcc-4.8.2:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.8.2:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.8.2:<cxxflags>-ftrack-macro-expansion=0
                                                 <toolset>gcc-4.8.3:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.8.3:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.8.3:<cxxflags>-ftrack-macro-expansion=0
                                                 <toolset>gcc-4.9.0:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.9.0:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.9.0:<cxxflags>-ftrack-macro-expansion=0
                                                 <toolset>gcc-4.9.1:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.9.1:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.9.1:<cxxflags>-ftrack-macro-expansion=0
                                                 <toolset>gcc-4.9.2:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.9.2:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.9.2:<cxxflags>-ftrack-macro-expansion=0
                                                 ;

test-suite variadic_macro_data
    : 
       [ run test_after_array_elem.cpp ]
       [ run test_after_identifier_elem.cpp ]
       [ run test_after_list_elem.cpp ]
       [ run test_after_number_elem.cpp ]
       [ run test_after_seq_elem.cpp ]
       [ run test_after_tuple_elem.cpp ]
       [ run test_after_type_elem.cpp ]
       [ run test_array_elem.cpp ]
       [ run test_array_empty.cpp ]
       [ run test_array_equal.cpp ]
       [ run test_ary.cpp ]
       [ compile test_assert.cpp ]
       [ compile-fail test_assert_fail.cpp ]
       [ compile-fail test_assert_fail_array.cpp ]
       [ compile-fail test_assert_fail_identifier.cpp ]
       [ compile-fail test_assert_fail_is_empty.cpp ]
       [ compile-fail test_assert_fail_is_identifier.cpp ]
       [ compile-fail test_assert_fail_is_number.cpp ]
       [ compile-fail test_assert_fail_list.cpp ]
       [ compile-fail test_assert_fail_number.cpp ]
       [ compile-fail test_assert_fail_seq.cpp ]
       [ compile-fail test_assert_fail_tuple.cpp ]
       [ compile-fail test_assert_fail_vcstring.cpp ]
       [ compile test_assert_is_array.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_array_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_array_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_array_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_array_fail4.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile test_assert_is_empty.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_empty_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_empty_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_empty_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile test_assert_is_identifier.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_identifier_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile test_assert_is_list.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_list_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_list_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_list_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_list_fail4.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile test_assert_is_number.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_number_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile test_assert_is_seq.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_seq_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_seq_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_seq_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_seq_fail4.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile test_assert_is_tuple.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_tuple_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_tuple_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_tuple_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_tuple_fail4.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile test_assert_is_type.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_type_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ run test_equal.cpp ]
       [ run test_equal_array.cpp ]
       [ run test_equal_identifier.cpp ]
       [ run test_equal_list.cpp ]
       [ run test_equal_multi.cpp ]
       [ run test_equal_number.cpp ]
       [ run test_equal_seq.cpp ]
       [ run test_equal_tuple.cpp ]
       [ run test_equal_type.cpp ]
       [ run test_identifier_elem.cpp ]
       [ run test_identifier_equal.cpp ]
       [ run test_is_array.cpp ]
       [ run-fail test_is_array_fail.cpp ]
       [ run-fail test_is_array_fail2.cpp ]
       [ run-fail test_is_array_fail3.cpp ]
       [ run-fail test_is_array_fail4.cpp ]
       [ run test_is_empty.cpp ]
       [ compile-fail test_is_empty_fail.cpp ]
       [ run test_is_identifier.cpp ]
       [ run test_is_list.cpp ]
       [ run-fail test_is_list_fail.cpp ]
       [ run-fail test_is_list_fail2.cpp ]
       [ run-fail test_is_list_fail3.cpp ]
       [ run-fail test_is_list_fail4.cpp ]
       [ run test_is_number.cpp ]
       [ run test_is_parens_empty.cpp ]
       [ run test_is_seq.cpp ]
       [ run-fail test_is_seq_fail.cpp ]
       [ run-fail test_is_seq_fail2.cpp ]
       [ run-fail test_is_seq_fail3.cpp ]
       [ run-fail test_is_seq_fail4.cpp ]
       [ run test_is_tuple.cpp ]
       [ run-fail test_is_tuple_fail.cpp ]
       [ run-fail test_is_tuple_fail2.cpp ]
       [ run-fail test_is_tuple_fail3.cpp ]
       [ run-fail test_is_tuple_fail4.cpp ]
       [ run test_is_type.cpp ]
       [ run test_list_elem.cpp ]
       [ run test_list_empty.cpp ]
       [ run test_list_equal.cpp ]
       [ run test_number_elem.cpp ]
       [ run test_number_equal.cpp ]
       [ run test_seq_elem.cpp ]
       [ run test_seq_equal.cpp ]
       [ run test_sequence_after_elem.cpp ]
       [ run test_sequence_elem.cpp ]
       [ run test_sequence_enum.cpp ]
       [ run test_sequence_size.cpp ]
       [ run test_sequence_to_array.cpp ]
       [ run test_sequence_to_list.cpp ]
       [ run test_sequence_to_seq.cpp ]
       [ run test_sequence_to_tuple.cpp ]
       [ run test_tuple_elem.cpp ]
       [ run test_tuple_equal.cpp ]
       [ run test_type.cpp ]
       [ run test_type_elem.cpp ]
       [ run test_type_equal.cpp ]
    ;

test-suite variadic_macro_data_gh
   : 
       [ run test_after_array_elem.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_after_array_elem_gh ]
       [ run test_after_identifier_elem.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_after_identifier_elem_gh ]
       [ run test_after_list_elem.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_after_list_elem_gh ]
       [ run test_after_number_elem.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_after_number_elem_gh ]
       [ run test_after_seq_elem.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_after_seq_elem_gh ]
       [ run test_after_tuple_elem.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_after_tuple_elem_gh ]
       [ run test_after_type_elem.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_after_type_elem_gh ]
       [ run test_array_elem.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_array_elem_gh ]
       [ run test_array_equal.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_array_equal_gh ]
       [ run test_array_empty.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_array_empty_gh ]
       [ run test_ary.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_ary_gh ]
       [ compile test_assert.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_gh ]
       [ compile-fail test_assert_fail.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_fail_gh ]
       [ compile-fail test_assert_fail_array.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_fail_array_gh ]
       [ compile-fail test_assert_fail_identifier.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_fail_identifier_gh ]
       [ compile-fail test_assert_fail_is_empty.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_fail_is_empty_gh ]
       [ compile-fail test_assert_fail_is_identifier.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_fail_is_identifier_gh ]
       [ compile-fail test_assert_fail_is_number.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_fail_is_number_gh ]
       [ compile-fail test_assert_fail_list.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_fail_list_gh ]
       [ compile-fail test_assert_fail_number.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_fail_number_gh ]
       [ compile-fail test_assert_fail_seq.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_fail_seq_gh ]
       [ compile-fail test_assert_fail_tuple.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_fail_tuple_gh ]
       [ compile-fail test_assert_fail_vcstring.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_fail_vcstring_gh ]
       [ compile test_assert_is_array.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_array_gh ]
       [ compile-fail test_assert_is_array_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_array_fail_gh ]
       [ compile-fail test_assert_is_array_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_array_fail2_gh.cpp ]
       [ compile-fail test_assert_is_array_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_array_fail3_gh ]
       [ compile-fail test_assert_is_array_fail4.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_array_fail4_gh ]
       [ compile test_assert_is_empty.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_empty_gh ]
       [ compile-fail test_assert_is_empty_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_empty_fail_gh ]
       [ compile-fail test_assert_is_empty_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_empty_fail2_gh ]
       [ compile-fail test_assert_is_empty_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_empty_fail3_gh ]
       [ compile test_assert_is_identifier.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_identifier_gh ]
       [ compile-fail test_assert_is_identifier_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_identifier_fail_gh ]
       [ compile test_assert_is_list.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_list_gh ]
       [ compile-fail test_assert_is_list_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_list_fail_gh ]
       [ compile-fail test_assert_is_list_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_list_fail2_gh.cpp ]
       [ compile-fail test_assert_is_list_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_list_fail3_gh ]
       [ compile-fail test_assert_is_list_fail4.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_list_fail4_gh ]
       [ compile test_assert_is_number.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_number_gh ]
       [ compile-fail test_assert_is_number_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_number_fail_gh ]
       [ compile test_assert_is_seq.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_seq_gh ]
       [ compile-fail test_assert_is_seq_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_seq_fail_gh ]
       [ compile-fail test_assert_is_seq_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_seq_fail2_gh.cpp ]
       [ compile-fail test_assert_is_seq_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_seq_fail3_gh ]
       [ compile-fail test_assert_is_seq_fail4.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_seq_fail4_gh ]
       [ compile test_assert_is_tuple.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_tuple_gh ]
       [ compile-fail test_assert_is_tuple_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_tuple_fail_gh ]
       [ compile-fail test_assert_is_tuple_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_tuple_fail2_gh.cpp ]
       [ compile-fail test_assert_is_tuple_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_tuple_fail3_gh ]
       [ compile-fail test_assert_is_tuple_fail4.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_tuple_fail4_gh ]
       [ compile test_assert_is_type.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_type_gh ]
       [ compile-fail test_assert_is_type_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_type_fail_gh ]
       [ run test_equal.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_equal_gh ]
       [ run test_equal_array.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_equal_array_gh ]
       [ run test_equal_identifier.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_equal_identifier_gh ]
       [ run test_equal_list.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_equal_list_gh ]
       [ run test_equal_multi.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_equal_multi_gh ]
       [ run test_equal_number.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_equal_number_gh ]
       [ run test_equal_seq.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_equal_seq_gh ]
       [ run test_equal_tuple.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_equal_tuple_gh ]
       [ run test_equal_type.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_equal_type_gh ]
       [ run test_identifier_elem.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_identifier_elem_gh ]
       [ run test_identifier_equal.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_identifier_equal_gh ]
       [ run test_is_array.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_array_gh ]
       [ run-fail test_is_array_fail.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_array_fail_gh ]
       [ run-fail test_is_array_fail2.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_array_fail2_gh ]
       [ run-fail test_is_array_fail3.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_array_fail3_gh ]
       [ run-fail test_is_array_fail4.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_array_fail4_gh ]
       [ run test_is_empty.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_empty_gh ]
       [ compile-fail test_is_empty_fail.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_empty_fail_gh ]
       [ run test_is_empty_tuple_succeed.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_empty_tuple_succeed_gh ]
       [ run test_is_identifier.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_identifier_gh ]
       [ run test_is_list.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_list_gh ]
       [ run-fail test_is_list_fail.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_list_fail_gh ]
       [ run-fail test_is_list_fail2.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_list_fail2_gh ]
       [ run-fail test_is_list_fail3.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_list_fail3_gh ]
       [ run-fail test_is_list_fail4.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_list_fail4_gh ]
       [ run test_is_number.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_number_gh ]
       [ run test_is_parens_empty.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_parens_empty_gh ]
       [ run test_is_seq.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_seq_gh ]
       [ run-fail test_is_seq_fail.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_seq_fail_gh ]
       [ run-fail test_is_seq_fail2.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_seq_fail2_gh ]
       [ run-fail test_is_seq_fail3.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_seq_fail3_gh ]
       [ run-fail test_is_seq_fail4.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_seq_fail4_gh ]
       [ run test_is_tuple.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_tuple_gh ]
       [ run-fail test_is_tuple_fail.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_tuple_fail_gh ]
       [ run-fail test_is_tuple_fail2.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_tuple_fail2_gh ]
       [ run-fail test_is_tuple_fail3.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_tuple_fail3_gh ]
       [ run-fail test_is_tuple_fail4.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_tuple_fail4_gh ]
       [ run test_is_type.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_type_gh ]
       [ run test_list_elem.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_list_elem_gh ]
       [ run test_list_empty.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_list_empty_gh ]
       [ run test_list_equal.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_list_equal_gh ]
       [ run test_number_elem.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_number_elem_gh ]
       [ run test_number_equal.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_number_equal_gh ]
       [ run test_seq_elem.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_seq_elem_gh ]
       [ run test_seq_equal.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_seq_equal_gh ]
       [ run test_sequence_after_elem.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_sequence_after_elem_gh ]
       [ run test_sequence_elem.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_sequence_elem_gh ]
       [ run test_sequence_enum.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_sequence_enum_gh ]
       [ run test_sequence_size.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_sequence_size_gh ]
       [ run test_sequence_to_array.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_sequence_to_array_gh ]
       [ run test_sequence_to_list.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_sequence_to_list_gh ]
       [ run test_sequence_to_seq.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_sequence_to_seq_gh ]
       [ run test_sequence_to_tuple.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_sequence_to_tuple_gh ]
       [ run test_tuple_elem.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_tuple_elem_gh ]
       [ run test_tuple_equal.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_tuple_equal_gh ]
       [ run test_type.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_type_gh ]
       [ run test_type_elem.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_type_elem_gh ]
       [ run test_type_equal.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_type_equal_gh ]
    ;
