# VariadicMacroData testing Jamfile
#
# Copyright (c) 2010-2013
# Edward Diener
#

import testing ;

project variadic_macro_data_tests : requirements <warnings>on
                                                 <toolset>msvc:<warnings>all
                                                 <toolset>gcc:<warnings>all
                                                 <toolset>gcc-4.3.0:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.3.0:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.3.0:<cxxflags>-U__STRICT_ANSI__
                                                 <toolset>gcc-4.4.0:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.4.0:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.4.0:<cxxflags>-U__STRICT_ANSI__
                                                 <toolset>gcc-4.4.7:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.5.0:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.5.0:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.5.0:<linkflags>"-Wl,--enable-auto-import"
                                                 <toolset>gcc-4.5.2:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.5.2:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.6.0:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.6.0:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.6.1:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.6.1:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.6.2:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.6.2:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.6.3:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.6.3:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.7.0:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.7.0:<cxxflags>-std=c++0x
                                                 <toolset>gcc-4.7.2:<cxxflags>-Wno-variadic-macros
                                                 <toolset>gcc-4.7.2:<cxxflags>-std=c++0x
                                                 ;

test-suite variadic_macro_data
    : 
       [ run test_after_identifier.cpp ]
       [ run test_after_parens.cpp ]
       [ compile test_assert_is_tuple.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_tuple_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_tuple_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_tuple_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_tuple_fail4.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile test_assert_is_array.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_array_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_array_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_array_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_array_fail4.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile test_assert_is_list.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_list_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_list_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_list_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_list_fail4.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile test_assert_is_seq.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_seq_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_seq_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_seq_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ compile-fail test_assert_is_seq_fail4.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1 ]
       [ run test_begin_identifier.cpp ]
       [ run test_begin_number.cpp ]
       [ run test_begin_parens.cpp ]
       [ run test_is_begin_parens.cpp ]
       [ run test_is_empty.cpp ]
       [ compile-fail test_is_empty_fail.cpp ]
       [ compile-fail test_is_empty_fail2.cpp ]
       [ compile-fail test_is_empty_fail3.cpp ]
       [ compile-fail test_is_empty_fail4.cpp ]
       [ run test_is_identifier.cpp ]
       [ run test_is_number.cpp ]
       [ run test_remove_parens.cpp ]
    ;

test-suite variadic_macro_data_gh
   : 
       [ run test_after_identifier.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_after_identifier_gh ]
       [ run test_after_parens.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_after_parens_gh ]
       [ compile test_assert_is_tuple.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_tuple_gh ]
       [ compile-fail test_assert_is_tuple_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_tuple_fail_gh ]
       [ compile-fail test_assert_is_tuple_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_tuple_fail2_gh.cpp ]
       [ compile-fail test_assert_is_tuple_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_tuple_fail3_gh ]
       [ compile-fail test_assert_is_tuple_fail4.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_tuple_fail4_gh ]
       [ compile test_assert_is_array.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_array_gh ]
       [ compile-fail test_assert_is_array_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_array_fail_gh ]
       [ compile-fail test_assert_is_array_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_array_fail2_gh.cpp ]
       [ compile-fail test_assert_is_array_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_array_fail3_gh ]
       [ compile-fail test_assert_is_array_fail4.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_array_fail4_gh ]
       [ compile test_assert_is_list.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_list_gh ]
       [ compile-fail test_assert_is_list_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_list_fail_gh ]
       [ compile-fail test_assert_is_list_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_list_fail2_gh.cpp ]
       [ compile-fail test_assert_is_list_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_list_fail3_gh ]
       [ compile-fail test_assert_is_list_fail4.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_list_fail4_gh ]
       [ compile test_assert_is_seq.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_seq_gh ]
       [ compile-fail test_assert_is_seq_fail.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_seq_fail_gh ]
       [ compile-fail test_assert_is_seq_fail2.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_seq_fail2_gh.cpp ]
       [ compile-fail test_assert_is_seq_fail3.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_seq_fail3_gh ]
       [ compile-fail test_assert_is_seq_fail4.cpp :
         <define>BOOST_VMD_ASSERT_DATA=1
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_assert_is_seq_fail4_gh ]
       [ run test_begin_identifier.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_begin_identifier_gh ]
       [ run test_begin_number.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_begin_number_gh ]
       [ run test_begin_parens.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_begin_parens_gh ]
       [ run test_is_begin_parens.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_begin_parens_gh ]
       [ run test_is_empty.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_empty_gh ]
       [ compile-fail test_is_empty_fail.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_empty_fail_gh ]
       [ compile-fail test_is_empty_fail2.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_empty_fail2_gh ]
       [ compile-fail test_is_empty_fail3.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_empty_fail3_gh ]
       [ compile-fail test_is_empty_fail4.cpp :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_empty_fail4_gh ]
       [ run test_is_identifier.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_identifier_gh ]
       [ run test_is_number.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_is_number_gh ]
       [ run test_remove_parens.cpp : : :
         <define>BOOST_VMD_TEST_GENERAL_HEADER : 
         test_remove_parens_gh ]
    ;
