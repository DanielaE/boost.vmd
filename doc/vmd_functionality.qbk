[section:vmd_functionality General Functionality]

The design of Boost PP allows data, in the form of preprocessor 
tokens, to be grouped together into various data types, any one of 
which can be treated as a single preprocessor argument to a macro. 
A number of Boost PP macros accept data as a single argument in the form
of one of these data types. Each of these data types also has its own 
rich set of macros to manipulate the data.

Similarly Boost PP supports variadic data, used largely as a means of allowing
end-user input to variadic macros.

VMD does not attempt to improve on the excellent functionality
of Boost PP when dealing internally with preprocessor data. Rather
VMD offers alternative constructs and functionality for 
representing preprocessor data which a preprocessor metaprogrammer
might find useful, as well as means of parsing/testing for data.

The alternative syntactical constructs
can be combined with Boost PP data, and variadic data, to provide
as much flexibility as the preprocessor metaprogrammer may want 
in designing macros for use in a C++ library. The focus on these
alternative constructs is to provide the ability for end-user
macros to be designed which has a more flexible syntax than
has been previously considered.

VMD also offers some advanced preprocessor functionality using the
flexibility of variadic macros. As variadic macro support is now part
of the latest C++11 standard, and had been part of the C99 standard 
before that, almost all major C++ compilers offer variadic macro support
as part of their C++ implementations.

[endsect]
