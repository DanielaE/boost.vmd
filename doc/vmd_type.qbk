[section:vmd_type Types]

A subset of identifiers is VMD types. These are identifiers which represent
all of the preprocessor data types which VMD can parse. This subset of
identifiers is automatically registered and pre-detected by VMD. Each identifier
type begins with the unique prefix 'BOOST_VMD_TYPE_'.

The actual types are:

BOOST_VMD_TYPE_EMPTY, represents emptiness, ie. "empty data"
BOOST_VMD_TYPE_ARRAY, a Boost PP array
BOOST_VMD_TYPE_LIST, a Boost PP list
BOOST_VMD_TYPE_SEQ, a Boost PP seq
BOOST_VMD_TYPE_TUPLE, a Boost PP tuple
BOOST_VMD_TYPE_IDENTIFIER, identifier
BOOST_BMD_TYPE_NUMBER, a number
BOOST_VMD_TYPE_TYPE, a type itself
BOOST_VMD_TYPE_VSEQUENCE, a sequence
BOOST_VMD_TYPE_UNKNOWN, an unknown type

Since a VMD type is itself an identifier the particular constraint on the input
to test is exactly the same as for identifiers.
 
The constraint is that the beginning input character, ignoring any whitespace, passed
as the input to test must be either:

* an identifier character, ie. an alphanumeric or an underscore
* the left parenthesis of a tuple. 

If this is not the case a preprocessing error will occur.

Given the input:

 s_anything : can be tested
 S_anything : can be tested
 s_anYthiNg : can be tested
 s&_anYthiNg : can be tested
 _anything : can be tested
 _Anything : can be tested
 _anytH?Ing : can be tested
 BOOST_VMD_TYPE_NUMBER : can be tested
 BOOST_VMD_TYPE_TUPLE245e2: can be tested
 (anything) : can be tested, tuple
 (anything) anything : can be tested, tuple + identifier
 
 %_anything : will give a preprocessing error due to the constraint
 (_anything : will give a preprocessing error due to the constraint, since a single '(' does not form a tuple

The macro used to test for a particular type in VMD is called BOOST_VMD_IS_TYPE.
The macro takes a single parameter, the input to test against.

The macro returns 1 if the parameter is a VMD type, otherwise the macro returns 0.

[heading Example]

Let us look at an example of how to use BOOST_VMD_IS_TYPE.

 BOOST_VMD_IS_NUMBER(input)
 
 returns:
 
 if input = BOOST_VMD_TYPE_SEQ, 1
 if input = BOOST_VMD_TYPE_NUMBER, 1
 if input = SQUARE, 0
 if input = BOOST_VMD_TYPE_IDENTIFIER DATA, 0 since there are tokens after the type
 if input = %44, does not meet the constraint therefore a preprocessing error occurs
 if input = ( BOOST_VMD_TYPE_EMPTY ), 0 since the macro begins with a tuple and this can be tested for

[heading Usage]

To use the BOOST_VMD_IS_TYPE macro either include the general header:

 #include <boost/vmd/vmd.hpp>
 
or include the specific header:

 #include <boost/vmd/is_type.hpp>

[endsect]
