[section:vmd_identifier Identifiers]

An identifier in VMD, hereafter called a 'v-identifier', is either of two possibilities:

* a preprocessing token 'identifier', which is essentially a sequence 
of alphanumeric characters and the underscore 
character with the first character not being a numeric character.
* a preprocessing token 'pp-number' that is an integral literal token.

Here are some examples:

 SOME_NAME
 _SOME_NAME
 SOME_123_NAME
 some_123_name
 sOMe_123_NAmE
 2367
 43e11
 0
 22
 654792
 0x1256

One of the difficulties with identifiers in preprocessor metaprogramming 
is safely testing for a particular one. VMD has a means of doing this within
a particular constraint for the characters that serve as the input.

The constraint is that the beginning input character, ignoring any whitespace, passed
as the input to test must be either:

* an identifier character, ie. an alphanumeric or an underscore
* the left parenthesis of a tuple. 

If this is not the case a preprocessing error will occur.

Given the input:

 s_anything : can be tested
 S_anything : can be tested
 s_anYthiNg : can be tested
 _anything : can be tested
 _Anything : can be tested
 _anytHIng : can be tested
 24 : can be tested
 245e2: can be tested
 (anything) : can be tested, tuple
 (anything) anything : can be tested, tuple and further input
 
 %_anything : will give a preprocessing error due to the constraint
 (_anything : will give a preprocessing error due to the constraint, since a single '(' does not form a tuple

[heading Identifying a v-identifier]

In VMD the only way a v-identifier can be identified in preprocessor input is by a process called
registration. In order to 'register' a v-identifier to be recognized by VMD the end-user must create,
for every identifier to be recognized as a v-identifier, an object-like macro whose form is:

 #define BOOST_VMD_REGISTER_v-identifier (v-identifier)
 
where 'v-identifier' is a particular v-identifier we wish to identify. This is called in
VMD a registration macro.

It is recommended that such registration macros be created in a header file which
can be included before the end-user uses the identifier macros of VMD, which will be
explained below and further in the VMD documentation.

If a particular registration macro occurs more than once it is
not a preprocessing error, so duplicating a registration macro will not lead to any problems
since each registration macro of the same name will have the exact same object-like macro
expansion.

Within a given translation unit it could potentially happen
that registration macros have been included by header files which a particular end-user
of VMD has not created. This should also not lead to particular problems since registration
is a process for adding v-identifiers for any particular transalation unit. As we shall see
VMD has macros for not only finding any v-identifier in preprocessor input but for also finding
particular v-identifiers in preprocessor input.

[heading Testing for a v-identifier]

The macro used to test for an identifier in VMD is called BOOST_VMD_IS_IDENTIFIER.
The macro takes two parameters. The first parameter is the input to test against, while the optional
second parameter is the actual identifier(s) to test against. This optional second parameter can be a single
v-identifier or a tuple of v-identifier tokens. Without the optional second parameter we are merely asking
whether the input represents any v-identifier which has been registered when the macro is invoked.

When  we invoke BOOST_VMD_IS_IDENTIFIER passing input that is any of the registered v-identifiers, 
BOOST_VMD_IS_IDENTIFIER returns 1, otherwise it returns 0.

As an example:

 #define BOOST_VMD_REGISTER_yellow (yellow)
 #define BOOST_VMD_REGISTER_green  (green)
 #define BOOST_VMD_REGISTER_blue   (blue)
 
 BOOST_VMD_IS_IDENTIFIER(some_input) // returns 1 if 'some_input is 'yellow','green', or 'blue'
 BOOST_VMD_IS_IDENTIFIER(some_input) // returns 0 if 'some_input' is 'purple'
 
Essentially only registered identifiers can be found in VMD as v-identifiers.

But now lets suppose we want to find, using BOOST_VMD_IS_IDENTIFIER, a particular registered 
identifier in our input and not just any registered v-identifier. In order to find a particular 
registered identifier we need to create a macro whose form is:

 BOOST_VMD_DETECT_v-identifier_v-identifier
 
where 'v-identifier' is a particular v-identifier we wish to find.
This object-like macro expands to no output.

The term for creating this macro is that we have potentially 'pre-detected'
the v-identifier and I will use the term pre-detected as the process of creating
the BOOST_VMD_DETECT macro.

Once we have registered and pre-detected a v-identifier we can test whether 
particular input can be found. We do this by passing the
second optional parameter to BOOST_VMD_IS_IDENTIFER. This optional parameter
is either a single v-identifier or a tuple of v-identifiers which our input
must match. Using the second optional parameter we are asking not only
if our input is any of the registered v-identifiers but also if it is one
or more pre-detected v-identifiers.

As an example:

 #define BOOST_VMD_REGISTER_yellow (yellow)
 #define BOOST_VMD_REGISTER_green (green)
 #define BOOST_VMD_REGISTER_blue (blue)
 #define BOOST_VMD_REGISTER_red (red)
 
 #define BOOST_VMD_DETECT_yellow_yellow
 #define BOOST_VMD_DETECT_green_green
 #define BOOST_VMD_DETECT_blue_blue
 
 BOOST_VMD_IS_IDENTIFIER(some_input,yellow) // returns 1 only if 'some_input is 'yellow', else 0
 BOOST_VMD_IS_IDENTIFIER(some_input,(yellow,green)) // returns 1 if 'some_input' is 'yellow' or 'green', else 0
 
 BOOST_VMD_IS_IDENTIFIER(some_input,red) // always returns 0, even if 'some_input' is 'red' since 'red' has not been pre-detected

whereas
 
 BOOST_VMD_IS_IDENTIFIER(some_input) // returns 1 if 'some_input' is 'red' since 'red' has been registered
 
If you invoke BOOST_VMD_IS_IDENTIFIER with the second optional parameter, the invocation will
only return 1 if the input matches one the v-identifier(s) of the second optional parameter and the 
v-identifier it matches has been pre-detected.

[heading Usage]

To use the BOOST_VMD_IS_IDENTIFIER macro either include the general header:

 #include <boost/vmd/vmd.hpp>
 
or include the specific header:

 #include <boost/vmd/identifier.hpp>

[endsect]
